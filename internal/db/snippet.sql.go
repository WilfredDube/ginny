// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: snippet.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const all = `-- name: All :many
SELECT id, guid, title, content, created, expires FROM snippets
WHERE expires > NOW() ORDER BY created DESC LIMIT 10
`

func (q *Queries) All(ctx context.Context) ([]Snippet, error) {
	rows, err := q.query(ctx, q.allStmt, all)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snippet
	for rows.Next() {
		var i Snippet
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.Title,
			&i.Content,
			&i.Created,
			&i.Expires,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createSnippet = `-- name: CreateSnippet :one
INSERT INTO snippets (
    guid, title, content, created, expires
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, guid, title, content, created, expires
`

type CreateSnippetParams struct {
	Guid    uuid.UUID `json:"guid"`
	Title   string    `json:"title"`
	Content string    `json:"content"`
	Created time.Time `json:"created"`
	Expires time.Time `json:"expires"`
}

func (q *Queries) CreateSnippet(ctx context.Context, arg CreateSnippetParams) (Snippet, error) {
	row := q.queryRow(ctx, q.createSnippetStmt, createSnippet,
		arg.Guid,
		arg.Title,
		arg.Content,
		arg.Created,
		arg.Expires,
	)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Title,
		&i.Content,
		&i.Created,
		&i.Expires,
	)
	return i, err
}

const get = `-- name: Get :one
SELECT id, guid, title, content, created, expires FROM snippets
WHERE expires > NOW() AND guid = $1
`

func (q *Queries) Get(ctx context.Context, guid uuid.UUID) (Snippet, error) {
	row := q.queryRow(ctx, q.getStmt, get, guid)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Title,
		&i.Content,
		&i.Created,
		&i.Expires,
	)
	return i, err
}
